import type { NextPage } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import { useCookies } from 'react-cookie'
import styles from '../styles/Home.module.css'
import Navbar from 'react-bootstrap/Navbar'
import Container from 'react-bootstrap/Container'
import Button from 'react-bootstrap/Button'
import Area from '../components/Area'
import { Sensor, getSensor, deleteSensor } from '../services/Sensor';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faPen, faTrashCan } from '@fortawesome/free-solid-svg-icons'

const Sensor: NextPage = () => {
  const [cookies, setCookies] = useCookies(['token']);
  const [sensor, setSensor] = useState({});
  const router = useRouter();
  const { id } = router.query;

  useEffect(() => {
    async function fetchData() {
      if (!cookies.token || cookies.token == '') {
        router.push('/registration');
      } else {
        try {
          const req: Sensor = {
            id: String(id),
            authToken: cookies.token,
          }
          const sensorResponse = await getSensor(req);
          const sensorResponseJson = await sensorResponse.json();
          console.log(sensorResponseJson);
          setSensor(sensorResponseJson);
        } catch (e) {
          alert('Oops, something went wrong!');
          console.error(e);
        }
      }
    }
    
    if (id) {
      fetchData();
    }
  }, [id, router, cookies]);

  const remove = async () => {
    if (confirm("Are you sure you want to delete this sensor?")) {
      try {
        const req: Sensor = {
          id: String(id),
          authToken: cookies.token,
        }
        const deleteSensorResponse = await deleteSensor(req);
        const deleteSensorResponseJson = await deleteSensorResponse.json();
        console.log(deleteSensorResponseJson);
        if (deleteSensorResponseJson.msg == 'success') {
          alert('Successfully deleted sensor.');
          router.push('/');
        } else {
          alert('Unable to delete sensor.')
        }
      } catch (e) {
        alert('Oops, something went wrong!');
        console.error(e);
      }
    }
    
  }

  const getType = (type: number) => {
    switch (type) {
      case 0: return 'Numerical';
      case 1: return 'Audio';
      case 2: return 'Video';
    }
  }

  const getStatusStyle = (status: number) => {
    switch (status) {
      case 1: return 'success';
      case 2: return 'warning';
      case 3: return 'danger';
    }
  }

  const getStatusMessage = (status: number) => {
    switch (status) {
      case 1: return 'Online';
      case 2: return 'Partially Functional';
      case 3: return 'Offline';
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>SDZWA Sensor Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar bg="light">
        <Container>
            <Button onClick={() => {router.push('/')}} variant="outline-primary" size="sm">Back</Button>{' '}
            <Navbar.Brand href="#home">SDZWA Sensor Dashboard</Navbar.Brand>
        </Container>
      </Navbar>

      <Container style={{ display: 'flex', alignItems: 'center', flexDirection: 'column', height: '90vh' }}>
        <div style={{ marginTop: 25, marginBottom: 25 }}>
          <h1 style={{ flex: 1, textAlign: 'center' }}>
            {sensor.name+' '}
            <FontAwesomeIcon 
              onClick={() => {router.push(`/edit_sensor?id=${id}`)}} 
              size="xs" 
              icon={faPen}
              style={{cursor: 'pointer', color: '#b0b0b0'}}
            />{' '}
            <FontAwesomeIcon 
              onClick={remove} 
              size="xs" 
              icon={faTrashCan}
              style={{cursor: 'pointer', color: '#ff8080'}}
            />
          </h1>
          <Area width={400} height={300} />
          <div style={{ display: 'flex', width: '100%', fontSize: 22, marginTop: 25, marginBottom: 25 }}>
            {sensor.description}
          </div>
          <div style={{ display: 'flex', width: '50%' }}>
            <div style={{ display: 'flex', width: '25%' }}>
              <div>
                <b>Type: </b>{getType(sensor.type)}
              </div>
            </div>
            <div style={{ display: 'flex', marginLeft: '100%' }}>
              <div>
                <b>Status: </b>
                <Button variant={getStatusStyle(sensor.status)} size="sm" disabled>
                  {getStatusMessage(sensor.status)}
                </Button>{' '}
              </div>
            </div>
          </div>
          <div style={{ display: 'flex', width: '50%' }}>
            <div style={{ display: 'flex', width: '25%' }}>
              <div>
                <b>Source: </b>{sensor.url}
              </div>
            </div>
            <div style={{ display: 'flex', marginLeft: '100%' }}>
              <div>
                <b>Location: </b>&lt;{sensor.locationX},{sensor.locationY}&gt;
              </div>
            </div>
          </div>
        </div>
      </Container>
    </div>
  )
}

export default Sensor
